Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.

my answer:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        ListNode** pCur = &head;
		ListNode** pNxt = NULL;
		ListNode* node = NULL;
		int i;
		
		for ( i = 1; i < m; i++) {
			pCur = &((*pCur)->next);
		}
		pNxt = &((*pCur)->next);
		
		while ( i < n ) {
			node = *pCur;
			*pCur = *pNxt;
			*pNxt = (*pCur)->next;
			(*pCur)->next = node;
			i++;
		}
		
		return head;    
    }
};


Given an array and a value, remove all instances of that value in place and return the new length.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

my answers:

class Solution {
public:
    int removeElement(int A[], int n, int elem) {
        int *cur, *next;
        
        if ( n < 1) return n;
        /*
         * cur : to be judge. 
         * next : the tail of the current array.
         */
        for ( cur = A, next = A+n-1; cur != next; ) {
            if (*cur == elem) {
                *cur = *next;
                next--;
            }
            else {
                cur++;
            }
        }
        
        if (*cur == elem)   return cur-A;
        return cur-A+1;
    }
};


other's answers:

class Solution {
public:
    int removeElement(int A[], int n, int elem) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        for (int i = n - 1; i >= 0; i--) {
            if (A[i] == elem) {
                A[i] = A[n - 1];
                n--;
            }
        }
        return n;
    }
};

总结：C语言内存模型至关重要。通过两个指向数组的指针进行大小比较，同时这两个执行时反向移动的时候，该程序是不可移植的。
    需要根据内存的增长方向来决定如何比较。故应该尽量避免用指针来进行运算。

Given an array and a value, remove all instances of that value in place and return the new length.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

my answers:

class Solution {
public:
    int removeElement(int A[], int n, int elem) {
        int *cur, *next;
        
        if ( n < 1) return n;
        /*
         * cur : to be judge. 
         * next : the tail of the current array.
         */
        for ( cur = A, next = A+n-1; cur != next; ) {
            if (*cur == elem) {
                *cur = *next;
                next--;
            }
            else {
                cur++;
            }
        }
        
        if (*cur == elem)   return cur-A;
        return cur-A+1;
    }
};


other's answers:

class Solution {
public:
    int removeElement(int A[], int n, int elem) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        for (int i = n - 1; i >= 0; i--) {
            if (A[i] == elem) {
                A[i] = A[n - 1];
                n--;
            }
        }
        return n;
    }
};

总结：上面的代码简洁，从中可以看出数组的变化应该遵循同向的原则。
